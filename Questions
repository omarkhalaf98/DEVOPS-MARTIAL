Docker Questions:

1- Containerization vs Virtualization:
		Containerization:
		Its a lightweight form of virtualization that allows multiple applications to run on the same operating system kernel, while maintaining isolation and independence from each other. Containers are created from images, which are pre-configured packages containing the application code, dependencies, and runtime environment. Containers share the host operating system's resources, such as CPU, memory, and network, while also providing a separate file system and process space for each container. Containerization is generally more resource-efficient than virtualization, as it eliminates the need for a separate operating system instance for each application.
		Virtualization:
		It provides a complete simulation of an operating system and hardware environment, allowing multiple operating systems and applications to run on the same physical machine. Each virtual machine (VM) runs its own operating system instance, which is isolated from the host operating system and other VMs. Virtualization requires a hypervisor, which is a software layer that provides the necessary abstraction and management of the VMs. Virtualization provides greater isolation and security than containerization, as each VM has its own set of resources and configuration settings.
		
2- what is docker?
		It’s an open-source platform for building, sharing and running distributed applications, it allows the developer to package an application and its dependencies into a container, which can be deployed to any environment that supports docker .
3- docker image vs docker container vs docker layer:
		Image: it’s a package that’s lightweight, standalone and executable, it include everything needed to run an application from code, runtime, libraries and dependencies, we create it from docker file, it can be stored in a registry and in can be reused in different environment.
		Container: its an instance of an image that’s run as a process, its lightweight and isolated which mean it has its own file system, network and runtime. We can run multiple container on the same host machine each one with its own resources and configuration.
		Layer: its single read-only filesystem that the represent the change to the image we add new layer on top of the previous one to create a new version of the image.
4- managing docker :
		We can mange docker by docker cli or docker management tool.
5- how to scale docker:
		We can scale docker manually by stating or stopping container instances or by automation by using orchestration tools like docker swarm or k8s, which it can manage the deployment and scaling across multiple host automatically.
6- what is docker compose?
		It’s a tool that lets us run multiple containers at the same time, we can define it in a single yaml file, we use compose with complex application that consist of multi services like web application or data base, from there we can set each services configration from environment variables, network settings and volume mounts.
7- Used docker to manage dependencies in python project:
		First we create a requirement.txt file then we use docker file that’s installs dependencies using pip.
8- docker file vs docker-compose file:
		Docker file: its used to define the content and build instruction for a single docker image.
		Compose-file: its used to define a set of services and there dependencies and it can mange multiple containers at the same time.
9- Docker Engine:
		(Docker daemon) it’s a lightweight runtime, it has many features like 
		Containerization that allows dev to package there application into a container that can be run on machine. Image management, network, storage and security.
10- Volume mount:
		It’s a away to access and share data between docker container and the host machine. It allows containers to read and write to the host machine or other container without copying the data, its also good for data backup and recovery because the data is stored outside the container  



